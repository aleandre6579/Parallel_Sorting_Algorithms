[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Harito\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Harito\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Amazon.com Inc. Java 20)
[debug]       Load.loadUnit: plugins took 385.9374ms
[debug]       Load.loadUnit: defsScala took 0.2474ms
[debug] [Loading] Scanning directory C:\Users\Harito\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Harito\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 190.9689 ms
[debug]           Load.resolveProject(global-plugins) took 74.2547ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Harito\.sbt\1.0\plugins, plugins: List(<none>))) took 322.2709ms
[debug] [Loading] Done in C:\Users\Harito\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 355.4682ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2359ms
[debug]     Load.loadUnit(file:/C:/Users/Harito/.sbt/1.0/plugins/, ...) took 777.8562ms
[debug]   Load.apply: load took 1088.2758ms
[debug]   Load.apply: resolveProjects took 7.4893ms
[debug]   Load.apply: finalTransforms took 190.847ms
[debug]   Load.apply: config.delegates took 7.9384ms
[debug]   Load.apply: Def.make(settings)... took 756.3634ms
[debug]   Load.apply: structureIndex took 78.3877ms
[debug]   Load.apply: mkStreams took 1.2135ms
[info] loading global plugins from C:\Users\Harito\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8933.6496ms
[debug]           Load.loadUnit: plugins took 20.9404ms
[debug]           Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar\project
[debug]             Load.loadUnit: mkEval took 30.1073ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2743 ms
[info] loading settings for project project_funpar-build from idea.sbt ...
[debug]               Load.resolveProject(project_funpar-build) took 2.2327ms
[debug]             Load.loadTransitive: finalizeProject(Project(id project_funpar-build, base: E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar\project, plugins: List(<none>))) took 3.9777ms
[debug] [Loading] Done in E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar\project, returning: (project_funpar-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3396.6116ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.9572ms
[debug]         Load.loadUnit(file:/E:/Alex%20Stuff/School%20Stuff/Y2%20-%20T3/FunPar/Project_Funpar/project/, ...) took 3422.2604ms
[debug]       Load.apply: load took 3423.3056ms
[debug]       Load.apply: resolveProjects took 0.0817ms
[debug]       Load.apply: finalTransforms took 9.547ms
[debug]       Load.apply: config.delegates took 0.3117ms
[debug]       Load.apply: Def.make(settings)... took 118.9296ms
[debug]       Load.apply: structureIndex took 26.5916ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7193.8304ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar
[debug]       Load.loadUnit: mkEval took 0.1502ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.8575 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 50.9643ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar, plugins: List(<none>))) took 57.6152ms
[debug] [Loading] Done in E:\Alex Stuff\School Stuff\Y2 - T3\FunPar\Project_Funpar, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1373.9993ms
[debug]     Load.loadUnit: cleanEvalClasses took 21.6519ms
[debug]   Load.loadUnit(file:/E:/Alex%20Stuff/School%20Stuff/Y2%20-%20T3/FunPar/Project_Funpar/, ...) took 8590.3043ms
[debug] Load.apply: load took 8591.8925ms
[debug] Load.apply: resolveProjects took 0.0897ms
[debug] Load.apply: finalTransforms took 27.5805ms
[debug] Load.apply: config.delegates took 0.386ms
[debug] Load.apply: Def.make(settings)... took 52.5301ms
[debug] Load.apply: structureIndex took 20.1456ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to Project_Funpar (in build file:/E:/Alex%20Stuff/School%20Stuff/Y2%20-%20T3/FunPar/Project_Funpar/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56319 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56319, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Project_Funpar (in build file:/E:/Alex%20Stuff/School%20Stuff/Y2%20-%20T3/FunPar/Project_Funpar/)
[debug] > Exec(idea-shell, None, None)
